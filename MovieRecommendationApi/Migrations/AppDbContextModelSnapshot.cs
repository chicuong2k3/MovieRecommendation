// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieRecommendationApi.Data;

#nullable disable

namespace MovieRecommendationApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("IdentityUserRole<string>");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.BelongsToCollection", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("BackdropPath")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "backdrop_path");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("PosterPath")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "poster_path");

                    b.HasKey("Id");

                    b.ToTable("BelongsToCollections");

                    b.HasAnnotation("Relational:JsonPropertyName", "belongs_to_collection");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.Credit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.HasKey("Id");

                    b.ToTable("Credits");

                    b.HasAnnotation("Relational:JsonPropertyName", "credits");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.FavoriteMovie", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("FavoriteMovies");

                    b.HasAnnotation("Relational:JsonPropertyName", "favorite_movies");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Genres");

                    b.HasAnnotation("Relational:JsonPropertyName", "genres");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "tmdb_id");

                    b.Property<bool>("Adult")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "adult");

                    b.Property<string>("BackdropPath")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "backdrop_path");

                    b.Property<int?>("BelongsToCollectionId")
                        .HasColumnType("int");

                    b.Property<int>("Budget")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "budget");

                    b.Property<string>("Categories")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "categories");

                    b.Property<int?>("CreditsId")
                        .HasColumnType("int");

                    b.Property<string>("Homepage")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "homepage");

                    b.Property<string>("OriginCountry")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "origin_country");

                    b.Property<string>("OriginalLanguage")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "original_language");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "original_title");

                    b.Property<string>("Overview")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "overview");

                    b.Property<double>("Popularity")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "popularity");

                    b.Property<string>("PosterPath")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "poster_path");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "release_date");

                    b.Property<int>("Runtime")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "runtime");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<string>("Tagline")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "tagline");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "title");

                    b.Property<bool>("Video")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "video");

                    b.Property<double>("VoteAverage")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "vote_average");

                    b.Property<int>("VoteCount")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "vote_count");

                    b.HasKey("Id");

                    b.HasIndex("BelongsToCollectionId");

                    b.HasIndex("CreditsId");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.MovieCast", b =>
                {
                    b.Property<int>("CastId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("CastId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieCasts");

                    b.HasAnnotation("Relational:JsonPropertyName", "movie_casts");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<bool>("Adult")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "adult");

                    b.Property<string>("AlsoKnownAs")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "also_known_as");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "biography");

                    b.Property<string>("Birthday")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "birthday");

                    b.Property<string>("Deathday")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "deathday");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "gender");

                    b.Property<string>("Homepage")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "homepage");

                    b.Property<string>("KnownForDepartment")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "known_for_department");

                    b.Property<int?>("MovieCreditsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "place_of_birth");

                    b.Property<double>("Popularity")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "popularity");

                    b.Property<string>("ProfilePath")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "profile_path");

                    b.HasKey("Id");

                    b.HasIndex("MovieCreditsId");

                    b.ToTable("People");

                    b.HasAnnotation("Relational:JsonPropertyName", "cast");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.ProductionCompany", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "logo_path");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("OriginCountry")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "origin_country");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("ProductionCompanies");

                    b.HasAnnotation("Relational:JsonPropertyName", "production_companies");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.ProductionCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IsoCode")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "iso_3166_1");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("ProductionCountries");

                    b.HasAnnotation("Relational:JsonPropertyName", "production_countries");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.RatingList", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RatingLists");

                    b.HasAnnotation("Relational:JsonPropertyName", "rating_lists");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.Review", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasAnnotation("Relational:JsonPropertyName", "reviews");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.SimilarMovie", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "tmdb_id");

                    b.Property<int>("SimilarMovieId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "similar_movie_id");

                    b.HasKey("MovieId", "SimilarMovieId");

                    b.HasIndex("SimilarMovieId");

                    b.ToTable("SimilarMovie");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.SpokenLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "english_name");

                    b.Property<string>("IsoCode")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "iso_639_1");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("SpokenLanguages");

                    b.HasAnnotation("Relational:JsonPropertyName", "spoken_languages");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.Video", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Official")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("PublishedAt")
                        .HasColumnType("date");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.WatchMovie", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("WatchMovies");

                    b.HasAnnotation("Relational:JsonPropertyName", "watch_movies");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.FavoriteMovie", b =>
                {
                    b.HasOne("MovieRecommendationApi.Models.Movie", "Movie")
                        .WithMany("FavoriteMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MovieRecommendationApi.Models.User", "User")
                        .WithMany("FavoriteMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.Genre", b =>
                {
                    b.HasOne("MovieRecommendationApi.Models.Movie", null)
                        .WithMany("Genres")
                        .HasForeignKey("MovieId");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.Movie", b =>
                {
                    b.HasOne("MovieRecommendationApi.Models.BelongsToCollection", "BelongsToCollection")
                        .WithMany()
                        .HasForeignKey("BelongsToCollectionId");

                    b.HasOne("MovieRecommendationApi.Models.Credit", "Credits")
                        .WithMany()
                        .HasForeignKey("CreditsId");

                    b.Navigation("BelongsToCollection");

                    b.Navigation("Credits");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.MovieCast", b =>
                {
                    b.HasOne("MovieRecommendationApi.Models.Person", "Cast")
                        .WithMany("MovieCasts")
                        .HasForeignKey("CastId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MovieRecommendationApi.Models.Movie", "Movie")
                        .WithMany("MovieCasts")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cast");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.Person", b =>
                {
                    b.HasOne("MovieRecommendationApi.Models.Credit", "MovieCredits")
                        .WithMany("Cast")
                        .HasForeignKey("MovieCreditsId");

                    b.Navigation("MovieCredits");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.ProductionCompany", b =>
                {
                    b.HasOne("MovieRecommendationApi.Models.Movie", null)
                        .WithMany("ProductionCompanies")
                        .HasForeignKey("MovieId");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.ProductionCountry", b =>
                {
                    b.HasOne("MovieRecommendationApi.Models.Movie", null)
                        .WithMany("ProductionCountries")
                        .HasForeignKey("MovieId");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.RatingList", b =>
                {
                    b.HasOne("MovieRecommendationApi.Models.Movie", "Movie")
                        .WithMany("RatingLists")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MovieRecommendationApi.Models.User", "User")
                        .WithMany("RatingLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.Review", b =>
                {
                    b.HasOne("MovieRecommendationApi.Models.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MovieRecommendationApi.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.SimilarMovie", b =>
                {
                    b.HasOne("MovieRecommendationApi.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MovieRecommendationApi.Models.Movie", "SimilarMovieEntity")
                        .WithMany()
                        .HasForeignKey("SimilarMovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("SimilarMovieEntity");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.SpokenLanguage", b =>
                {
                    b.HasOne("MovieRecommendationApi.Models.Movie", null)
                        .WithMany("SpokenLanguages")
                        .HasForeignKey("MovieId");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.WatchMovie", b =>
                {
                    b.HasOne("MovieRecommendationApi.Models.Movie", "Movie")
                        .WithMany("WatchMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MovieRecommendationApi.Models.User", "User")
                        .WithMany("WatchMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.Credit", b =>
                {
                    b.Navigation("Cast");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.Movie", b =>
                {
                    b.Navigation("FavoriteMovies");

                    b.Navigation("Genres");

                    b.Navigation("MovieCasts");

                    b.Navigation("ProductionCompanies");

                    b.Navigation("ProductionCountries");

                    b.Navigation("RatingLists");

                    b.Navigation("Reviews");

                    b.Navigation("SpokenLanguages");

                    b.Navigation("WatchMovies");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.Person", b =>
                {
                    b.Navigation("MovieCasts");
                });

            modelBuilder.Entity("MovieRecommendationApi.Models.User", b =>
                {
                    b.Navigation("FavoriteMovies");

                    b.Navigation("RatingLists");

                    b.Navigation("Reviews");

                    b.Navigation("WatchMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
